tosca_definitions_version: cloudify_dsl_1_3

imports:
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/4.2/resources/rest-service/cloudify/types/types.yaml
  - https://github.com/cloudify-cosmo/cloudify-aws-plugin/releases/download/1.5.1.2/plugin.yaml
  - http://www.getcloudify.org/spec/utilities-plugin/1.4.1/plugin.yaml
  - https://raw.githubusercontent.com/cloudify-incubator/cloudify-utilities-plugin/1.4.1/cloudify_cloudinit/types.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml
  - types/cloud_config/cloud-config.yaml

inputs:

  webserver_port:
    description: The HTTP web server port
    default: 8080

  agent_user:
    description: >
      The username of the agent running on the instance created from the image.
    default: ubuntu

  ami:
    description: >
      An AWS AMI. Tested with a Ubuntu 14.04 image.
    default: { get_secret: ubuntu_trusty_image }

  instance_type:
    description: >
      The AWS instance_type. Tested with m3.medium, although that is unnecessarily large.
    default: t2.micro

dsl_definitions:

    aws_config: &aws_config
      aws_access_key_id: { get_secret: aws_access_key_id }
      aws_secret_access_key: { get_secret: aws_secret_access_key }
      ec2_region_name: { get_secret: ec2_region_name }
      ec2_region_endpoint: { get_secret: ec2_region_endpoint }

node_templates:

  http_web_server:
    type: cloudify.nodes.WebServer
    properties:
      port: { get_input: webserver_port }
    relationships:
      - type: cloudify.relationships.contained_in
        target: vm
    interfaces:
      cloudify.interfaces.lifecycle:
        configure: scripts/configure.sh
        start: scripts/start.sh
        stop: scripts/stop.sh

  vm:
    type: cloudify.aws.nodes.Instance
    properties:
      aws_config: *aws_config
      image_id: { get_input: ami }
      instance_type: { get_input: instance_type }
      agent_config:
        install_method: remote
        user: { get_input: agent_user }
        port: 22
        key: { get_secret: agent_key_private }
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_elastic_ip
        target: elastic_ip
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: security_group
      - type: cloudify.aws.relationships.instance_contained_in_subnet
        target: public_subnet
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: aws.cloudify_aws.ec2.instance.create
          inputs:
            args:
              block_device_map:
                '/dev/sda1':
                  delete_on_termination: true
              placement: { get_secret: availability_zone }
              user_data: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }
      cloudify.interfaces.monitoring_agent:
          install:
            implementation: diamond.diamond_agent.tasks.install
            inputs:
              diamond_config:
                interval: 1
          start: diamond.diamond_agent.tasks.start
          stop: diamond.diamond_agent.tasks.stop
          uninstall: diamond.diamond_agent.tasks.uninstall
      cloudify.interfaces.monitoring:
          start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
              collectors_config:
                  CPUCollector: {}
                  MemoryCollector: {}
                  LoadAverageCollector: {}
                  DiskUsageCollector:
                    config:
                      devices: x?vd[a-z]+[0-9]*$
                  NetworkCollector: {}

  public_subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_secret: public_subnet_id }
      cidr_block: N/A
      availability_zone: N/A
    relationships:
      - type: cloudify.aws.relationships.subnet_contained_in_vpc
        target: vpc

  security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: Security group for Hello World VM
      rules:
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 22
          to_port: 22
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: { get_property: [ http_web_server, port ] }
          to_port: { get_property: [ http_web_server, port ] }
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  vpc:
    type: cloudify.aws.nodes.VPC
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_secret: vpc_id }
      cidr_block: N/A
    relationships:
      - type: cloudify.relationships.depends_on
        target: cloudify_host_cloud_config

  cloudify_host_cloud_config:
    type: cloudify.nodes.CloudInit.CloudConfig
    properties:
      resource_config:
        users:
          - name: { get_input: agent_user }
            shell: /bin/bash
            sudo: ['ALL=(ALL) NOPASSWD:ALL']
            ssh-authorized-keys:
              - { get_secret: agent_key_public }

  elastic_ip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *aws_config
      domain: vpc

outputs:

  endpoint:
    description: Web application endpoint
    value:
      concat:
      - 'http://'
      - { get_attribute: [elastic_ip, aws_resource_id] }
      - ':'
      - { get_property: [http_web_server, port] }
      - '/'
